topic "template <class T>";
[i448;a25;kKO9; $$1,0#37138531426314131252341829483380:structitem]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:codeitem]
[ $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@3 [s0;%% [*@(229)4 MultiDimMatrixIndex]]}}&]
[s2; &]
[s1; [@(0.0.255) template] <[@(0.0.255) class] T>&]
[s1;:Upp`:`:MultiDimMatrix: [@(0.0.255) class ][* MultiDimMatrix]&]
[s2;%% &]
[s3;%% [2 A simple class to handle multidimensional matrices storing 
any data type (template <class T>).]&]
[s0;%% [2 By default the storage is col major, although it can be changed 
with ColMajor() or RowMajor() functions.]&]
[s3;%% &]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%% [*2 Constructor Detail]]}}&]
[s4;%% &]
[s5;:Upp`:`:MultiDimMatrix`:`:MultiDimMatrix`(Args`.`.`.`): [@(0.0.255) template] 
<[@(0.0.255) typename] [@(0.0.255) ...]Args> [* MultiDimMatrix<T>](Args 
[@(0.0.255) ...][*@3 args])&]
[s2;%% Sets in [%-*@3 args] the axis dimensions.&]
[s3; &]
[s0;%% &]
[ {{10000F(128)G(128)@1 [s0;%% [*2 Public Member List]]}}&]
[s3; &]
[s5;:Upp`:`:MultiDimMatrix`:`:operator`(`)`(Args`.`.`.`): [@(0.0.255) template] 
<[@(0.0.255) typename] [@(0.0.255) ...]Args> T[@(0.0.255) `&] operator()(Args 
[@(0.0.255) ...]args)&]
[s2;%% Sets the data in the indicated index of each dimension.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:operator`(`)`(const Vector`&`): T[@(0.0.255) `&] 
operator()([@(0.0.255) const] Vector<[@(0.0.255) int]>[@(0.0.255) `&] 
indx)&]
[s2;%% Sets the data in the indicated index of each dimension.&]
[s3;%% &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:operator`(`)`(Args`.`.`.`)const: [@(0.0.255) template] 
<[@(0.0.255) typename] [@(0.0.255) ...]Args> [@(0.0.255) const] T[@(0.0.255) `&] 
operator()(Args [@(0.0.255) ...]args) [@(0.0.255) const]&]
[s2;%% Access the data in the indicated index of each dimension.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:operator`(`)`(const Vector`&`)const: [@(0.0.255) const] 
T[@(0.0.255) `&] operator()([@(0.0.255) const] Vector<[@(0.0.255) int]>[@(0.0.255) `&] 
indx) [@(0.0.255) const]&]
[s2;%% Access the data in the indicated index of each dimension..&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:block`(const Vector`&`,int`,int`,int`,int`): Eigen[@(0.0.255) `:
:]Matrix<T, Eigen[@(0.0.255) `::]Dynamic, Eigen[@(0.0.255) `::]Dynamic> 
[* block]([@(0.0.255) const] Vector<[@(0.0.255) int]>[@(0.0.255) `&] 
[*@3 indx], [@(0.0.255) int] [*@3 idrow], [@(0.0.255) int] [*@3 wrow], 
[@(0.0.255) int] [*@3 idcol], [@(0.0.255) int] [*@3 wcol])&]
[s2;%% Returns an Eigen`::Matrix with a copy of the data from [%-*@3 indx], 
considering [%-*@3 idrow] as the dimension of the rows and [%-*@3 idcol] 
as the dimension of the columns, of height [%-*@3 wrow] and width 
[%-*@3 wcol].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:GetNumAxis`(`)const: [@(0.0.255) int] 
[* GetNumAxis]() [@(0.0.255) const]&]
[s2;%% Gets the number of dimensions.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:ColMajor`(bool`): [@(0.0.255) void] [* ColMajor]([@(0.0.255) b
ool] [*@3 c] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2;%% It [%-*@3 c] is true sets the storage as column major. If false 
it sets it as row major.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:RowMajor`(bool`): [@(0.0.255) void] [* RowMajor]([@(0.0.255) b
ool] [*@3 c] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2;%% It [%-*@3 c] is true sets the storage as row major. If false 
it sets it as column major.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:size`(`)const: [@(0.0.255) int] [* size]() 
[@(0.0.255) const]&]
[s2;%% Returns the number of elements of the stored data.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:size`(int`)const: [@(0.0.255) int] [* size]([@(0.0.255) int] 
[*@3 dim]) [@(0.0.255) const]&]
[s2;%% Returns the number of elements of dimension [%-*@3 dim].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:Resize`(int`,Args`.`.`.`): [@(0.0.255) template] 
<[@(0.0.255) typename] [@(0.0.255) ...]Args> [@(0.0.255) void] [* Resize]([@(0.0.255) int] 
[*@3 t], Args [@(0.0.255) ...][*@3 args])&]
[s2;%% Resizes the matrix with the new sizes per dimension in [%-*@3 args].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:Resize`(const Vector`&`): [@(0.0.255) void] 
[* Resize]([@(0.0.255) const] Vector<[@(0.0.255) int]>[@(0.0.255) `&] 
[*@3 dim])&]
[s2;%% Resizes the matrix with the new sizes per dimension in [%-*@3 dim].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:MultiDimMatrix`:`:begin`(`)const: [@(0.0.255) const] T 
[@(0.0.255) `*][* begin]() [@(0.0.255) const]&]
[s2;%% Gets a pointer to the raw data.&]
[s3;%% ]]